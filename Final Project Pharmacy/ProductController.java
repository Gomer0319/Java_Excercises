// Create a class called ProductController where we have methods to add the products, add to inventory, update, delete and search products
public class ProductController {
    public void addProduct() {// Add a product to the product list
        // Have a message to add a product with name, category, price per unit, if it needs prescription, supplier. Name should be unique, if there is a product with the same name, the system should throw an exception
        // The product ID should be auto-generated by the system. If there is a product with the same ID, the system should throw an exception.
        // If there is a new product, the system should add it to the product list, with the product ID + 1 from the previous product.
        boolean keepAdding = true;
        
        while (keepAdding) {
            System.out.println("\n--------Add Product--------");
            String productName = Utility.getString("Product name: ");
            String productCategory = Utility.getString("Category: ");
            double productPrice = Utility.getDouble("Price: ");
            
            // Validate price
            if (productPrice <= 0) {
                throw new IllegalArgumentException("Price must be greater than zero.");
            }
            Utility.userInput.nextLine();

            String productPrescription = Utility.getString("Needs Prescription (y/n): ");
            // Validate user input that the user will only enter "y" or "n"
            while (!productPrescription.equalsIgnoreCase("y") && !productPrescription.equalsIgnoreCase("n")) {
                System.out.println("Invalid input. Please try again.");
                productPrescription = Utility.getString("Needs Prescription (y/n): ");
                Utility.userInput.nextLine();
            }

            String productManufacturer = Utility.getString("Manufacturer: ");

            // Create a Product object
            Product.addProduct(IdGenerator.generateID("Product"), productName, productCategory, productPrice, productPrescription, productManufacturer, Utility.getCurrentDateTime());

            // Ask the user if they want to add another product
            String addAnother = Utility.getString("\nAdd another product (y/n): ");
            // Validate user input that the user will only enter "y" or "n"
            while (!addAnother.equalsIgnoreCase("y") && !addAnother.equalsIgnoreCase("n")) {
                System.out.println("Invalid input. Please try again.");
                addAnother = Utility.getString("\nAdd another product (y/n): ");
                Utility.userInput.nextLine();
            }

            if (addAnother.equalsIgnoreCase("n")) {
                // If the user does not want to add another product, the system should exit the loop and a message should be displayed
                System.out.println("Exiting to main menu.");
                keepAdding = false;
            }
            else if (addAnother.equalsIgnoreCase("y")) {
                // If the user wants to add another product, the system should continue the loop
                Utility.clearScreen();
                continue;
            }
            Utility.clearScreen();
        }
    }

    public void addToInventory() {// Add to inventory
        // Have a message to add the quantity of the product to the inventory
        System.out.println("\n--------Add to Inventory--------");
        // Find item either by name or product ID. If the product is not found, the system should throw an exception.
        System.out.println("Enter product name or product ID: ");
        String productId = Utility.getString("Product ID: ").trim();

        // Validate input
        if (productId.isEmpty() || productId.equals("0")) {
            System.out.println("No valid ID entered. Returning to inventory menu.");
            return; // Exit the method
        }

        boolean productFound = false;

        // Check if product is a match by ID.
        for (Product product : Product.productList) {
            if (product.getProductId().equals(productId)) {
                productFound = true;

                // Print the product details of match
                System.out.println("Product Matched:");
                System.out.printf(" %-10s %-15s %-25s %-10.2f %-15s %-30s %-20s\n", 
                    product.getProductId(), 
                    product.getProductCategory(), 
                    product.getProductName(), 
                    product.getProductPrice(), 
                    product.getProductPrescription(), 
                    product.getProductManufacturer(), 
                    product.getProductDateAdded());

                // Get the quantity to add
                double quantityToAdd = Utility.getDouble("Quantity to add: ");
                Utility.userInput.nextLine();

                // Validate the quantity
                if (quantityToAdd <= 0) {
                    System.out.println("Invalid quantity. No items added to inventory.");
                    return; // Exit the method
                }

                // Prompt expiry date
                String expiryDate = Utility.getString("Expiry Date (yyyy-MM-dd): ").trim();
                    if (!Utility.isValidDate(expiryDate)) {
                        System.out.println("Invalid expiry date. No items added to inventory.");
                        return;
                    }

                // Generate an ID for the inventory transaction, with a character concatenated to the product ID (example: RT + the generated ID (RT0001))
                String inventoryTransactionId = "RT" + IdGenerator.generateID("Inventory Transaction");

                // Add the quantity to the product Inventory
                Product.addToInventory(
                    inventoryTransactionId,
                    product.getProductId(), 
                    product.getProductName(), 
                    product.getProductCategory(), 
                    product.getProductPrice(), 
                    quantityToAdd,
                    expiryDate,
                    product.getProductPrescription(), 
                    product.getProductManufacturer(), 
                    Utility.getCurrentDateTime());
                return;
            }
        }

        // If the product is not found, the system should throw an exception.
        if (!productFound) {
            System.out.println("Product not found. Returning to inventory menu.");
        }
    }

    public void updateProduct() {// Update product
        // Have a message to update the product
        System.out.println("\n--------Update Product--------");

        //Find item by ID. If the product is not found, the system should throw an exception.
        System.out.println("Enter product ID: ");
        String productId = Utility.getString("Product ID: ").trim();

        // Validate input
        if (productId.isEmpty() || productId.equals("0")) {
            System.out.println("No valid ID entered. Returning to product menu.");
            return; // Exit the method
        }

        // Check if product is a match by ID.
        boolean productFound = false;
        for (Product product : Product.productList) {
            if (product.getProductId().equals(productId)) {
                productFound = true;

                // Print the product details of match
                System.out.println("\nProduct Matched:");
                System.out.printf(" %-10s %-15s %-25s %-10.2f %-15s %-30s\n", 
                    product.getProductId(), 
                    product.getProductCategory(), 
                    product.getProductName(), 
                    product.getProductPrice(), 
                    product.getProductPrescription(), 
                    product.getProductManufacturer());

                // Redirect to the Product.java updateProduct method
                Product.updateProduct(product.getProductId());
                return;
            }
        }

        // If the product is not found, the system should throw an exception.    
        if (!productFound) {
            System.out.println("Product not found. Returning to product menu.");
        }
    }

    public void offsetInventoryTransaction() {
        System.out.println("\n--------Offset Inventory Transaction--------");
    
        // Ask the user for the Inventory Transaction ID
        String transactionId = Utility.getString("Enter Inventory Transaction ID: ").trim();
    
        // Validate input
        if (transactionId.isEmpty()) {
            System.out.println("Invalid Transaction ID. Returning to inventory menu.");
            return; // Exit the method
        }
    
        boolean transactionFound = false;
    
        // Locate the specific inventory transaction
        for (Product transaction : Product.inventoryList) {
            if (transaction.getInventoryTransactionId().equals(transactionId)) {
                transactionFound = true;
    
                // Print the transaction details
                System.out.println("\nTransaction Matched:");
                System.out.printf(" %-15s %-10s %-30s %-10.2f %-10.2f %-20s %-20s\n",
                    transaction.getInventoryTransactionId(),
                    transaction.getProductId(),
                    transaction.getProductName(),
                    transaction.getProductPrice(),
                    transaction.getProductQuantity(),
                    transaction.getproductExpiry(),
                    transaction.getProductDateAdded());
    
                // Ask the user for the offset quantity
                double offsetQuantity = Utility.getDouble("Enter offset quantity (negative for deduction, positive for addition): ");
                Utility.userInput.nextLine();
    
                // Validate offset quantity input
                if (offsetQuantity == 0) {
                    System.out.println("No offset applied. Returning to inventory menu.");
                    return;
                }
    
                // Ensure the offset does not make the total quantity negative
                double currentTotalQuantity = calculateProductTotalQuantity(transaction.getProductId());
                if (currentTotalQuantity + offsetQuantity < 0) {
                    System.out.println("Error: Offset would result in negative inventory. Operation canceled.");
                    return;
                }
    
                // Create a new transaction for the offset
                String offsetTransactionId = "OT" + IdGenerator.generateID("Offset Transaction");
                Product.addToInventory(
                    offsetTransactionId,
                    transaction.getProductId(),
                    transaction.getProductName(),
                    transaction.getProductCategory(),
                    transaction.getProductPrice(),
                    offsetQuantity,
                    transaction.getproductExpiry(),
                    transaction.getProductPrescription(),
                    transaction.getProductManufacturer(),
                    Utility.getCurrentDateTime()
                );
    
                System.out.println("Offset successfully applied.");
                return;
            }
        }
    
        if (!transactionFound) {
            System.out.println("Transaction ID not found. Returning to inventory menu.");
        }
    }

    // Method to calculate the total quantity of a product
    private double calculateProductTotalQuantity(String productId) {
        double totalQuantity = 0;
    
        for (Product transaction : Product.inventoryList) {
            if (transaction.getProductId().equals(productId)) {
                totalQuantity += transaction.getProductQuantity();
            }
        }
    
        return totalQuantity;
    }

    public void deleteProduct() {// Delete product
        // Have a message to delete the product
        System.out.println("\n--------Delete Product--------");

        //Find item by ID. If the product is not found, the system should throw an exception.
        System.out.println("Enter product ID: ");
        String productId = Utility.getString("Product ID: ").trim();

        // Validate input
        if (productId.isEmpty() || productId.equals("0")) {
            System.out.println("No valid ID entered. Returning to product menu.");
            return; // Exit the method
        }

        boolean productFound = false;

        // Check if product is a match by ID.
        for (Product product : Product.productList) {
            if (product.getProductId().equals(productId)) {
                productFound = true;

                // Print the product details of match
                System.out.println("\nProduct Matched:");
                System.out.printf(" %-10s %-15s %-25s %-10.2f %-15s %-30s\n",
                    product.getProductId(),
                    product.getProductCategory(),
                    product.getProductName(),
                    product.getProductPrice(),
                    product.getProductPrescription(),
                    product.getProductManufacturer());

                // Ask the user if they want to delete the product
                System.out.println("Are you sure you want to delete this product (y/n)? ");

                // Validate input
                while (!Utility.userInput.hasNext("y") && !Utility.userInput.hasNext("n")) {
                    System.out.println("Invalid input. Please enter 'y' or 'n'.");
                    Utility.userInput.next();
                }

                if (Utility.userInput.hasNext("y")) {
                    Product.productList.remove(product);
                    System.out.println("Product deleted successfully.");
                    return;
                } 
                else if (Utility.userInput.hasNext("n")) {
                    System.out.println("Product deletion canceled.");
                    return;
                }
            }
        }

        if (!productFound) {
            System.out.println("Product ID not found. Returning to product menu.");
        }
    }

    public void searchProduct() {// Display inventory
        // Have a message to display the inventory
        System.out.printf("\n ---------------Search Inventory---------------- \n");

        //Find item by ID. If the product is not found, the system should throw an exception.
        String productId = Utility.getString("Enter Product ID: ").trim();

        // Validate input
        if (productId.isEmpty() || productId.equals("0")) {
            System.out.println("No valid ID entered. Returning to product menu.");
            return; // Exit the method
        }

        boolean productFound = false;

        // Check if product is a match by ID.
        for (Product product : Product.productList) {
            if (product.getProductId().equals(productId)) {
                productFound = true;

                // Check if there are any inventory transactions for the product
                if (Product.inventoryList.isEmpty()) {
                    System.out.println("Inventory is empty. No inventory transactions yet.");
                    return;
                }
                else {
                    // Print the product details of match from the inventoryList
                    System.out.println("\nProduct Matched:");
                    System.out.println("||------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------||");
                    System.out.printf("|| %-15s || %-10s || %-15s || %-30s || %-10s || %-10s || %-10s || %-15s || %-30s || %-20s ||\n", "InvtyTransID", "ID", "Category", "Name", "Price", "Qty", "Expiry", "Prescription", "Manufacturer", "Date Added");
                    System.out.println("||------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------||");

                    // Get product data from the <Product> List from Product.java and display it
                    for (Product transaction : Product.inventoryList) {
                        if (transaction.getProductId().equals(productId)) {
                            System.out.printf("|| %-15s || %-10s || %-15s || %-30s || %-10.2f || %-10.2f || %-10s || %-15s || %-30s || %-20s ||\n", 
                                transaction.getInventoryTransactionId(),
                                transaction.getProductId(),
                                transaction.getProductCategory(),   
                                transaction.getProductName(), 
                                transaction.getProductPrice(),
                                transaction.getProductQuantity(),
                                transaction.getproductExpiry(), 
                                transaction.getProductPrescription(),   
                                transaction.getProductManufacturer(),
                                transaction.getProductDateAdded());
                        }
                    }
                    System.out.println("||------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------||\n");

                    //Ask the user if they want to search again
                    String userInput = Utility.getString("Do you want to search again (y/n)? ");

                    // Validate input
                    while (!userInput.equalsIgnoreCase("y") && !userInput.equalsIgnoreCase("n")) {
                        System.out.println("Invalid input. Please enter 'y' or 'n'.");
                        Utility.userInput.next();
                    }

                    if (userInput.equalsIgnoreCase("y")) {
                        searchProduct();
                    }
                    else if (userInput.equalsIgnoreCase("n")) {
                        System.out.println("Returning to product menu.");
                        return;
                    }
                }
            }
        }
        if (!productFound) {
            System.out.println("Product ID not found. Returning to product menu.");
        }
    }
}
